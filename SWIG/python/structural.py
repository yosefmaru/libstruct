# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_structural', [dirname(__file__)])
        except ImportError:
            import _structural
            return _structural
        if fp is not None:
            try:
                _mod = imp.load_module('_structural', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _structural = swig_import_helper()
    del swig_import_helper
else:
    import _structural
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _structural.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _structural.SwigPyIterator_value(self)
    def incr(self, n=1): return _structural.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _structural.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _structural.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _structural.SwigPyIterator_equal(self, *args)
    def copy(self): return _structural.SwigPyIterator_copy(self)
    def next(self): return _structural.SwigPyIterator_next(self)
    def __next__(self): return _structural.SwigPyIterator___next__(self)
    def previous(self): return _structural.SwigPyIterator_previous(self)
    def advance(self, *args): return _structural.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _structural.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _structural.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _structural.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _structural.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _structural.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _structural.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _structural.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _structural.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _structural.StringVector___nonzero__(self)
    def __bool__(self): return _structural.StringVector___bool__(self)
    def __len__(self): return _structural.StringVector___len__(self)
    def pop(self): return _structural.StringVector_pop(self)
    def __getslice__(self, *args): return _structural.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _structural.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _structural.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _structural.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _structural.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _structural.StringVector___setitem__(self, *args)
    def append(self, *args): return _structural.StringVector_append(self, *args)
    def empty(self): return _structural.StringVector_empty(self)
    def size(self): return _structural.StringVector_size(self)
    def clear(self): return _structural.StringVector_clear(self)
    def swap(self, *args): return _structural.StringVector_swap(self, *args)
    def get_allocator(self): return _structural.StringVector_get_allocator(self)
    def begin(self): return _structural.StringVector_begin(self)
    def end(self): return _structural.StringVector_end(self)
    def rbegin(self): return _structural.StringVector_rbegin(self)
    def rend(self): return _structural.StringVector_rend(self)
    def pop_back(self): return _structural.StringVector_pop_back(self)
    def erase(self, *args): return _structural.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _structural.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _structural.StringVector_push_back(self, *args)
    def front(self): return _structural.StringVector_front(self)
    def back(self): return _structural.StringVector_back(self)
    def assign(self, *args): return _structural.StringVector_assign(self, *args)
    def resize(self, *args): return _structural.StringVector_resize(self, *args)
    def insert(self, *args): return _structural.StringVector_insert(self, *args)
    def reserve(self, *args): return _structural.StringVector_reserve(self, *args)
    def capacity(self): return _structural.StringVector_capacity(self)
    __swig_destroy__ = _structural.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _structural.StringVector_swigregister
StringVector_swigregister(StringVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _structural.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _structural.DoubleVector___nonzero__(self)
    def __bool__(self): return _structural.DoubleVector___bool__(self)
    def __len__(self): return _structural.DoubleVector___len__(self)
    def pop(self): return _structural.DoubleVector_pop(self)
    def __getslice__(self, *args): return _structural.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _structural.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _structural.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _structural.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _structural.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _structural.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _structural.DoubleVector_append(self, *args)
    def empty(self): return _structural.DoubleVector_empty(self)
    def size(self): return _structural.DoubleVector_size(self)
    def clear(self): return _structural.DoubleVector_clear(self)
    def swap(self, *args): return _structural.DoubleVector_swap(self, *args)
    def get_allocator(self): return _structural.DoubleVector_get_allocator(self)
    def begin(self): return _structural.DoubleVector_begin(self)
    def end(self): return _structural.DoubleVector_end(self)
    def rbegin(self): return _structural.DoubleVector_rbegin(self)
    def rend(self): return _structural.DoubleVector_rend(self)
    def pop_back(self): return _structural.DoubleVector_pop_back(self)
    def erase(self, *args): return _structural.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _structural.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _structural.DoubleVector_push_back(self, *args)
    def front(self): return _structural.DoubleVector_front(self)
    def back(self): return _structural.DoubleVector_back(self)
    def assign(self, *args): return _structural.DoubleVector_assign(self, *args)
    def resize(self, *args): return _structural.DoubleVector_resize(self, *args)
    def insert(self, *args): return _structural.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _structural.DoubleVector_reserve(self, *args)
    def capacity(self): return _structural.DoubleVector_capacity(self)
    __swig_destroy__ = _structural.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _structural.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class complexArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, complexArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, complexArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _structural.new_complexArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _structural.delete_complexArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _structural.complexArray___getitem__(self, *args)
    def __setitem__(self, *args): return _structural.complexArray___setitem__(self, *args)
    def cast(self): return _structural.complexArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _structural.complexArray_frompointer
    if _newclass:frompointer = staticmethod(_structural.complexArray_frompointer)
complexArray_swigregister = _structural.complexArray_swigregister
complexArray_swigregister(complexArray)

def complexArray_frompointer(*args):
  return _structural.complexArray_frompointer(*args)
complexArray_frompointer = _structural.complexArray_frompointer

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _structural.new_doubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _structural.delete_doubleArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _structural.doubleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _structural.doubleArray___setitem__(self, *args)
    def cast(self): return _structural.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _structural.doubleArray_frompointer
    if _newclass:frompointer = staticmethod(_structural.doubleArray_frompointer)
doubleArray_swigregister = _structural.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(*args):
  return _structural.doubleArray_frompointer(*args)
doubleArray_frompointer = _structural.doubleArray_frompointer

class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _structural.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _structural.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _structural.intArray___getitem__(self, *args)
    def __setitem__(self, *args): return _structural.intArray___setitem__(self, *args)
    def cast(self): return _structural.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _structural.intArray_frompointer
    if _newclass:frompointer = staticmethod(_structural.intArray_frompointer)
intArray_swigregister = _structural.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(*args):
  return _structural.intArray_frompointer(*args)
intArray_frompointer = _structural.intArray_frompointer

class DoubleMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _structural.new_DoubleMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def getArray(self): return _structural.DoubleMatrix_getArray(self)
    def getCopy(self, transpose=False): return _structural.DoubleMatrix_getCopy(self, transpose)
    def initializeFrom2DMatrix(self, *args): return _structural.DoubleMatrix_initializeFrom2DMatrix(self, *args)
    def initializeFromConst2DMatrix(self, *args): return _structural.DoubleMatrix_initializeFromConst2DMatrix(self, *args)
    __swig_destroy__ = _structural.delete_DoubleMatrix
    __del__ = lambda self : None;
    def get2DMatrix(self, *args): return _structural.DoubleMatrix_get2DMatrix(self, *args)
    def swapRows(self, *args): return _structural.DoubleMatrix_swapRows(self, *args)
    def swapCols(self, *args): return _structural.DoubleMatrix_swapCols(self, *args)
    def resize(self, *args): return _structural.DoubleMatrix_resize(self, *args)
    def getTranspose(self): return _structural.DoubleMatrix_getTranspose(self)
    def size(self): return _structural.DoubleMatrix_size(self)
    def numRows(self): return _structural.DoubleMatrix_numRows(self)
    def numCols(self): return _structural.DoubleMatrix_numCols(self)
    def __call__(self, *args): return _structural.DoubleMatrix___call__(self, *args)
    def get(self, *args): return _structural.DoubleMatrix_get(self, *args)
    def set(self, *args): return _structural.DoubleMatrix_set(self, *args)
DoubleMatrix_swigregister = _structural.DoubleMatrix_swigregister
DoubleMatrix_swigregister(DoubleMatrix)

class IntMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _structural.new_IntMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def getArray(self): return _structural.IntMatrix_getArray(self)
    def getCopy(self, transpose=False): return _structural.IntMatrix_getCopy(self, transpose)
    def initializeFrom2DMatrix(self, *args): return _structural.IntMatrix_initializeFrom2DMatrix(self, *args)
    def initializeFromConst2DMatrix(self, *args): return _structural.IntMatrix_initializeFromConst2DMatrix(self, *args)
    __swig_destroy__ = _structural.delete_IntMatrix
    __del__ = lambda self : None;
    def get2DMatrix(self, *args): return _structural.IntMatrix_get2DMatrix(self, *args)
    def swapRows(self, *args): return _structural.IntMatrix_swapRows(self, *args)
    def swapCols(self, *args): return _structural.IntMatrix_swapCols(self, *args)
    def resize(self, *args): return _structural.IntMatrix_resize(self, *args)
    def getTranspose(self): return _structural.IntMatrix_getTranspose(self)
    def size(self): return _structural.IntMatrix_size(self)
    def numRows(self): return _structural.IntMatrix_numRows(self)
    def numCols(self): return _structural.IntMatrix_numCols(self)
    def __call__(self, *args): return _structural.IntMatrix___call__(self, *args)
    def get(self, *args): return _structural.IntMatrix_get(self, *args)
    def set(self, *args): return _structural.IntMatrix_set(self, *args)
IntMatrix_swigregister = _structural.IntMatrix_swigregister
IntMatrix_swigregister(IntMatrix)

class ComplexMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _structural.new_ComplexMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def getArray(self): return _structural.ComplexMatrix_getArray(self)
    def getCopy(self, transpose=False): return _structural.ComplexMatrix_getCopy(self, transpose)
    def initializeFrom2DMatrix(self, *args): return _structural.ComplexMatrix_initializeFrom2DMatrix(self, *args)
    def initializeFromConst2DMatrix(self, *args): return _structural.ComplexMatrix_initializeFromConst2DMatrix(self, *args)
    __swig_destroy__ = _structural.delete_ComplexMatrix
    __del__ = lambda self : None;
    def get2DMatrix(self, *args): return _structural.ComplexMatrix_get2DMatrix(self, *args)
    def swapRows(self, *args): return _structural.ComplexMatrix_swapRows(self, *args)
    def swapCols(self, *args): return _structural.ComplexMatrix_swapCols(self, *args)
    def resize(self, *args): return _structural.ComplexMatrix_resize(self, *args)
    def getTranspose(self): return _structural.ComplexMatrix_getTranspose(self)
    def size(self): return _structural.ComplexMatrix_size(self)
    def numRows(self): return _structural.ComplexMatrix_numRows(self)
    def numCols(self): return _structural.ComplexMatrix_numCols(self)
    def __call__(self, *args): return _structural.ComplexMatrix___call__(self, *args)
    def get(self, *args): return _structural.ComplexMatrix_get(self, *args)
    def set(self, *args): return _structural.ComplexMatrix_set(self, *args)
ComplexMatrix_swigregister = _structural.ComplexMatrix_swigregister
ComplexMatrix_swigregister(ComplexMatrix)

# This file is compatible with both classic and new-style classes.


